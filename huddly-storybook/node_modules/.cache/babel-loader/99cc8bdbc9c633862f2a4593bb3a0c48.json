{"ast":null,"code":"var _jsxFileName = \"/Users/rostimelk/Projects/huddly-components/huddly-storybook/src/stories/Forms/Textarea/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * Todo\n * Add focus outline\n * Add color variations\n */\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n    height: ${_ref => {\n  let {\n    height\n  } = _ref;\n  return `${height}px`;\n}};\n    margin-bottom: 1rem;\n    padding: 15px;\n    border-radius: 6px;\n    font-size: 16px;\n    cursor: text;\n    background-color: rgba(0, 0, 0, 0.3);\n    transition: all 0.2s ease-in-out, height 0;\n\n    ${_ref2 => {\n  let {\n    focused,\n    expanded\n  } = _ref2;\n  return (focused || expanded) && `padding-top: 10px;\n        border: 1px solid black; \n        background-color: var(--color-white);\n        `;\n}}\n\n    label {\n        padding-bottom: 5px;\n        cursor: inherit;\n        transition: inherit;\n\n        ${_ref3 => {\n  let {\n    focused,\n    expanded\n  } = _ref3;\n  return (focused || expanded) && `font-size: 12px;\n            font-weight: bold;`;\n}}\n\n        // required text\n        i {\n            padding-left: 5px;\n            font-style: normal;\n            font-weight: normal;\n            font-size: 12px;\n        }\n    }\n\n    textarea {\n        all: unset;\n        flex-grow: 1;\n        overflow: hidden;\n        word-wrap: break-word;\n        resize: none;\n        background-color: red;\n        will-change: height;\n    }\n`;\n/**\n * TextArea component\n */\n\n_c = Wrapper;\nexport const TextArea = _ref4 => {\n  _s();\n\n  let {\n    label,\n    isRequired,\n    baseHeight = 136\n  } = _ref4;\n  const [focused, setFocused] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const [height, setHeight] = useState(baseHeight);\n  const textareaRef = useRef(null);\n\n  const onFocus = () => setFocused(true);\n\n  const onBlur = () => setFocused(false);\n\n  const handleTextArea = () => {\n    if (!textareaRef.current) return; // Set expanded state to true if textarea has content\n\n    setExpanded(textareaRef.current.value.length > 0);\n    const newHeight = calculateHeight();\n    console.log(newHeight);\n    setHeight(123);\n  };\n  /**\n   * Set height to auto to allow the textarea to expand\n   * @returns {number}\n   */\n\n\n  const calculateHeight = () => {\n    var _textarea$parentEleme;\n\n    if (!textareaRef.current) return height;\n    const textarea = textareaRef.current;\n    const wrapperHeight = ((_textarea$parentEleme = textarea.parentElement) === null || _textarea$parentEleme === void 0 ? void 0 : _textarea$parentEleme.clientHeight) || 0;\n    const textareaHeight = textarea.clientHeight || 0;\n    const contentHeight = textarea.scrollHeight;\n    return wrapperHeight - textareaHeight + contentHeight;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    focused: focused,\n    expanded: expanded,\n    height: height,\n    onClick: () => {\n      var _textareaRef$current;\n\n      return textareaRef === null || textareaRef === void 0 ? void 0 : (_textareaRef$current = textareaRef.current) === null || _textareaRef$current === void 0 ? void 0 : _textareaRef$current.focus();\n    },\n    children: [label && /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [label, !isRequired && /*#__PURE__*/_jsxDEV(\"i\", {\n        children: \"(optional)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      required: isRequired,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: handleTextArea,\n      ref: textareaRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextArea, \"4GkEmeEc9W/UlMuq5WMoNpaTicw=\");\n\n_c2 = TextArea;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"TextArea\");","map":{"version":3,"sources":["/Users/rostimelk/Projects/huddly-components/huddly-storybook/src/stories/Forms/Textarea/index.tsx"],"names":["useState","useRef","styled","Wrapper","div","height","focused","expanded","TextArea","label","isRequired","baseHeight","setFocused","setExpanded","setHeight","textareaRef","onFocus","onBlur","handleTextArea","current","value","length","newHeight","calculateHeight","console","log","textarea","wrapperHeight","parentElement","clientHeight","textareaHeight","contentHeight","scrollHeight","focus"],"mappings":"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","sourcesContent":["import { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\ninterface TextAreaProps {\n    /**\n     * label description.\n     */\n    label?: string;\n\n    /**\n     * isRequired description.\n     */\n    isRequired?: boolean;\n\n    /**\n     * Textarea height in px.\n     * @default '136'\n     */\n    baseHeight?: number;\n}\n\ninterface WrapperProps {\n    focused: boolean;\n    expanded: boolean;\n    height: number;\n}\n\n/**\n * Todo\n * Add focus outline\n * Add color variations\n */\nconst Wrapper = styled.div<WrapperProps>`\n    display: flex;\n    flex-direction: column;\n    max-width: 600px;\n    height: ${({ height }) => `${height}px`};\n    margin-bottom: 1rem;\n    padding: 15px;\n    border-radius: 6px;\n    font-size: 16px;\n    cursor: text;\n    background-color: rgba(0, 0, 0, 0.3);\n    transition: all 0.2s ease-in-out, height 0;\n\n    ${({ focused, expanded }) =>\n        (focused || expanded) &&\n        `padding-top: 10px;\n        border: 1px solid black; \n        background-color: var(--color-white);\n        `}\n\n    label {\n        padding-bottom: 5px;\n        cursor: inherit;\n        transition: inherit;\n\n        ${({ focused, expanded }) =>\n            (focused || expanded) &&\n            `font-size: 12px;\n            font-weight: bold;`}\n\n        // required text\n        i {\n            padding-left: 5px;\n            font-style: normal;\n            font-weight: normal;\n            font-size: 12px;\n        }\n    }\n\n    textarea {\n        all: unset;\n        flex-grow: 1;\n        overflow: hidden;\n        word-wrap: break-word;\n        resize: none;\n        background-color: red;\n        will-change: height;\n    }\n`;\n\n/**\n * TextArea component\n */\nexport const TextArea = ({\n    label,\n    isRequired,\n    baseHeight = 136,\n}: TextAreaProps) => {\n    const [focused, setFocused] = useState(false);\n    const [expanded, setExpanded] = useState(false);\n    const [height, setHeight] = useState(baseHeight);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const onFocus = () => setFocused(true);\n    const onBlur = () => setFocused(false);\n\n    const handleTextArea = () => {\n        if (!textareaRef.current) return;\n        // Set expanded state to true if textarea has content\n        setExpanded(textareaRef.current.value.length > 0);\n\n        const newHeight = calculateHeight();\n        console.log(newHeight);\n        setHeight(123);\n    };\n\n    /**\n     * Set height to auto to allow the textarea to expand\n     * @returns {number}\n     */\n    const calculateHeight = () => {\n        if (!textareaRef.current) return height;\n        const textarea = textareaRef.current;\n        const wrapperHeight = textarea.parentElement?.clientHeight || 0;\n        const textareaHeight = textarea.clientHeight || 0;\n        const contentHeight = textarea.scrollHeight;\n\n        return wrapperHeight - textareaHeight + contentHeight;\n    };\n\n    return (\n        <Wrapper\n            focused={focused}\n            expanded={expanded}\n            height={height}\n            onClick={() => textareaRef?.current?.focus()}\n        >\n            {label && (\n                <label>\n                    {label}\n                    {!isRequired && <i>(optional)</i>}\n                </label>\n            )}\n            <textarea\n                required={isRequired}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onChange={handleTextArea}\n                ref={textareaRef}\n            ></textarea>\n        </Wrapper>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
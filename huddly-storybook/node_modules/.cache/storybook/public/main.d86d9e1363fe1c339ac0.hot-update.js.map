{"version":3,"file":"main.d86d9e1363fe1c339ac0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAnDA;AAoDA;AAIA;;AAAA;AAHA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;;AAEA;;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAKA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AAAA;;AAAA;AAAA;AAJA;AAOA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAqBA;;AAzDA;;AAAA","sources":["webpack://huddly-storybook/./src/stories/Forms/Textarea/index.tsx"],"sourcesContent":["import { useState, useRef } from 'react';\nimport styled from 'styled-components';\n\ninterface TextAreaProps {\n    /**\n     * label description.\n     */\n    label?: string;\n\n    /**\n     * isRequired description.\n     */\n    isRequired?: boolean;\n\n    /**\n     * Textarea height in px.\n     * @default '136'\n     */\n    baseHeight?: number;\n}\n\ninterface WrapperProps {\n    focused: boolean;\n    expanded: boolean;\n    height: number;\n}\n\n/**\n * Todo\n * Add focus outline\n * Add color variations\n */\nconst Wrapper = styled.div<WrapperProps>`\n    max-width: 600px;\n    height: ${({ height }) => `${height}px`};\n    margin-bottom: 1rem;\n    padding: 15px;\n    border-radius: 6px;\n    font-size: 16px;\n    cursor: text;\n    background-color: rgba(0, 0, 0, 0.3);\n    transition: all 0.2s ease-in-out;\n    display: flex;\n    flex-direction: column;\n    row-gap: 6px;\n\n    ${({ focused, expanded }) =>\n        (focused || expanded) &&\n        `padding-top: 10px;\n        border: 1px solid black; \n        background-color: var(--color-white);\n        `}\n\n    label {\n        cursor: inherit;\n        transition: inherit;\n\n        ${({ focused, expanded }) =>\n            (focused || expanded) &&\n            `font-size: 12px;\n            font-weight: bold;`}\n\n        // required text\n        i {\n            font-style: normal;\n            font-size: 12px;\n            font-weight: normal;\n            padding-left: 5px;\n        }\n    }\n\n    textarea {\n        all: unset;\n        resize: none;\n        flex-grow: 1;\n        overflow: hidden;\n        word-wrap: break-word;\n        background-color: red;\n    }\n`;\n\n/**\n * TextArea component\n */\nexport const TextArea = ({\n    label,\n    isRequired,\n    baseHeight = 136,\n}: TextAreaProps) => {\n    const [focused, setFocused] = useState(false);\n    const [expanded, setExpanded] = useState(false);\n    const [height, setHeight] = useState(baseHeight);\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const onFocus = () => setFocused(true);\n    const onBlur = () => setFocused(false);\n\n    const handleTextArea = () => {\n        if (!textareaRef.current) return;\n        const textarea = textareaRef.current;\n\n        setExpanded(textarea.value.length > 0);\n\n        const lines = textarea.value.split('\\n').length;\n\n        const lineHeight =\n            window.getComputedStyle(textarea).lineHeight === 'normal'\n                ? 1\n                : parseFloat(window.getComputedStyle(textarea).lineHeight);\n\n        const fontSize = parseFloat(window.getComputedStyle(textarea).fontSize);\n\n        const contentHeight = lines * fontSize;\n\n        console.log({ lines, lineHeight, fontSize, contentHeight });\n\n        setHeight(contentHeight < baseHeight ? baseHeight : contentHeight);\n    };\n\n    return (\n        <Wrapper\n            focused={focused}\n            expanded={expanded}\n            height={height}\n            onClick={() => textareaRef?.current?.focus()}\n        >\n            {label && (\n                <label>\n                    {label}\n                    {!isRequired && <i>(optional)</i>}\n                </label>\n            )}\n            <textarea\n                required={isRequired}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                onChange={handleTextArea}\n                ref={textareaRef}\n            ></textarea>\n        </Wrapper>\n    );\n};\n"],"names":[],"sourceRoot":""}